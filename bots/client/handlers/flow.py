import os
import logging
import urllib.parse

import httpx
from aiogram import Router, types
from aiogram.fsm.state import StatesGroup, State
from aiogram import F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from io import BytesIO
from aiogram.types import InputFile
from client.handlers.storage import user_data
from client.handlers.settings_client import fetch_bot_settings

router = Router()
API_BASE = os.getenv('API_BASE_URL', 'http://138.124.123.68:8080/api')
API_V1 = API_BASE.rstrip('/') + '/v1'

DASH_RATE = float(os.getenv('DASH_EXCHANGE_RATE', '0.001'))

logging.getLogger(__name__).setLevel(logging.DEBUG)

PURCHASE_BTN = ['üõí –ö—É–ø–∏—Ç—å', 'üõí ‘≥’∂’•’¨', 'üõí Buy']
MENU_BTN = {
    'purchase': {'ru': 'üõí –ö—É–ø–∏—Ç—å', 'hy': 'üõí ‘≥’∂’•’¨', 'en': 'üõí Buy'},
    'operator': {'ru': 'üìû –û–ø–µ—Ä–∞—Ç–æ—Ä', 'hy': 'üìû ’ï’∫’•÷Ä’°’ø’∏÷Ä', 'en': 'üìû Operator'},
    'how_to_buy': {'ru': '‚ùì –ö–∞–∫ –∫—É–ø–∏—Ç—å', 'hy': '‚ùì ‘ª’∂’π’∫’•’Ω ’£’∂’•’¨', 'en': '‚ùì How to buy'},
    'change_lang': {'ru': 'üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', 'hy': 'üåê ’ì’∏’≠’•’¨ ’¨’•’¶’∏÷Ç’∂', 'en': 'üåê Change language'},
    'discount': {'ru': 'üí∏ –°–∫–∏–¥–∫–∞', 'hy': 'üí∏ ‘∂’•’≤’π', 'en': 'üí∏ Discount'},
    'reviews': {'ru': 'üìù –û—Ç–∑—ã–≤—ã', 'hy': 'üìù ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä', 'en': 'üìù Reviews'},
    'menu': {'ru': 'üìã –ú–µ–Ω—é', 'hy': 'üìã ’Ñ’•’∂’µ’∏÷Ç', 'en': 'üìã Menu'}
}
BACK_BTN = {'ru': 'üîô –ù–∞–∑–∞–¥', 'hy': 'üîô ‘±’∂’∞’•’ø', 'en': 'üîô Back'}
MENU_BTN_EXTRA = {'ru': 'üìã –ú–µ–Ω—é', 'hy': 'üìã ’Ñ’•’∂’µ’∏÷Ç', 'en': 'üìã Menu'}

CHANNEL_USERNAME = os.getenv('TELEGRAM_CHANNEL', '@your_channel')


def make_keyboard(rows: list[list[str]], lang: str, with_back=True, with_menu=True):
    kb_rows = [[KeyboardButton(text=label) for label in row] for row in rows]
    extra = []
    if with_back:
        extra.append(BACK_BTN[lang])
    if with_menu:
        extra.append(MENU_BTN_EXTRA[lang])
    if extra:
        kb_rows.append([KeyboardButton(text=t) for t in extra])
    return ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True)


def make_main_menu(lang: str) -> ReplyKeyboardMarkup:
    # —Å–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è MENU_BTN
    labels = [
        MENU_BTN['purchase'][lang],
        MENU_BTN['operator'][lang],
        MENU_BTN['how_to_buy'][lang],
        MENU_BTN['change_lang'][lang],
        MENU_BTN['discount'][lang],
        MENU_BTN['reviews'][lang],
        MENU_BTN['menu'][lang],
    ]
    # –¥–µ–ª–∏–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    keyboard = []
    for i in range(0, len(labels), 2):
        row = [KeyboardButton(text=labels[i])]
        if i + 1 < len(labels):
            row.append(KeyboardButton(text=labels[i + 1]))
        keyboard.append(row)
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )


@router.message(
    F.text.in_([
        MENU_BTN_EXTRA['ru'],
        MENU_BTN_EXTRA['hy'],
        MENU_BTN_EXTRA['en'],
    ])
)
async def show_main_menu(message: types.Message):
    chat_id = message.chat.id
    data = user_data[chat_id]
    lang = data['lang']
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏
    data['step'] = 'main'
    await message.answer(
        {
            'ru': 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            'hy': 'üìã ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç’ù',
            'en': 'üìã Main menu:'
        }[lang],
        reply_markup=make_main_menu(lang)
    )


@router.message(
    # lambda m: user_data.get(m.chat.id, {}).get('step') == 'main',
    F.text.in_([label for sub in MENU_BTN.values() for label in sub.values()])
)
async def main_menu_router(message: types.Message):
    chat_id = message.chat.id
    data = user_data[chat_id]
    lang = data['lang']
    text = message.text

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∂–∞–ª–∏
    if text == MENU_BTN['purchase'][lang]:
        # ‚Üí –ø–æ–∫—É–ø–∫–∞
        data['step'] = 'city_choose'
        await choose_city(message)  # –≤—ã–∑—ã–≤–∞–µ–º –≤–∞—à —Ö–µ–Ω–¥–ª–µ—Ä
    elif text == MENU_BTN['operator'][lang]:
        token = data['token']
        settings = await fetch_bot_settings()
        contact = settings.get('operator_contact') or '‚Äî'
        data['step'] = 'main'
        await message.answer({
                                 'ru': f'üìû –û–ø–µ—Ä–∞—Ç–æ—Ä: {contact}',
                                 'hy': f'üìû ’ï’∫’•÷Ä’°’ø’∏÷Ä: {contact}',
                                 'en': f'üìû Operator: {contact}'
                             }[lang])
    elif text == MENU_BTN['how_to_buy'][lang]:
        token = data['token']
        settings = await fetch_bot_settings()
        url = settings.get('exchange_url') or 'https://example.com'
        btn = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text={'ru': '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±–º–µ–Ω–Ω–∏–∫—É', 'hy': '‘≥’∂’°’¨ ÷É’∏’≠’°’∂’°’Ø’´’π', 'en': 'Go to exchange'}[
                    lang],
                url=url
            )
        ]])
        data['step'] = 'main'
        await message.answer({
                                 'ru': '‚ùì –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:',
                                 'hy': '‚ùì ‘≥’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’°’∂÷Å’•÷Ñ ’∞’≤’∏÷Ç’¥’∏’æ’ù',
                                 'en': '‚ùì To purchase, follow the link:'
                             }[lang], reply_markup=btn)
    elif text == MENU_BTN['change_lang'][lang]:
        data['step'] = 'main'
        # ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
        data['step'] = 'show_language_keyboard'
        from client.handlers.language import ask_language
        await ask_language(message)
        return
    elif text == MENU_BTN['discount'][lang]:
        token = data['token']
        settings = await fetch_bot_settings()
        chan_link = settings.get('channel_link') or '‚Äî'

        if chan_link.startswith('http'):
            # https://t.me/your_channel  ‚Üí  your_channel
            from urllib.parse import urlparse
            path = urlparse(chan_link).path  # '/your_channel'
            username = '@' + path.lstrip('/')
        else:
            username = chan_link if chan_link.startswith('@') else f"@{chan_link}"
        subscribed = False

        try:
            member = await message.bot.get_chat_member(chat_id=username, user_id=chat_id)
            # —Å—Ç–∞—Ç—É—Å—ã 'member', 'administrator', 'creator' –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –≤ –∫–∞–Ω–∞–ª–µ
            if member.status in ('member', 'administrator', 'creator'):
                subscribed = True
        except Exception as e:
            # –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            logging.warning("Cannot check subscription for %s: %r", username, e)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –≤ data, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–∞–≤–∏–ª—Å—è –≤ pay_payload
        data['apply_subscription_discount'] = subscribed

        # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        if subscribed:
            status_text = {
                'ru': '‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚Äî –≤–∞—à–∞ $2 —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!',
                'hy': '‚úÖ ‘¥’∏÷Ç÷Ñ ’°÷Ä’§’•’∂ ’£÷Ä’°’∂÷Å’æ’°’Æ ’•÷Ñ ‚Äî $2 ’¶’•’≤’π’® ’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß:',
                'en': '‚úÖ You are subscribed ‚Äî your $2 discount is active!'
            }[lang]
        else:
            status_text = {
                'ru': '‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É $2.',
                'hy': '‚ö†Ô∏è ‘¥’∏÷Ç÷Ñ ’π’•÷Ñ ’£÷Ä’°’∂÷Å’æ’°’Æ ’°’¨’´÷Ñ’∏÷Ç’¥, ’£÷Ä’°’∂÷Å’æ’•÷Ñ’ù $2 ’¶’•’≤’π’´ ’∞’°’¥’°÷Ä÷â',
                'en': '‚ö†Ô∏è You are not subscribed to the channel. Subscribe to get a $2 discount.'
            }[lang]

        data['step'] = 'main'
        await message.answer(
            f"{status_text}\n\n" + {
                'ru': '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–¥–µ—Å—å:',
                'hy': '‘≥÷Ä’°’∂÷Å’æ’•÷Ñ ’°’µ’Ω’ø’•’≤’ù',
                'en': 'Subscribe here:'
            }[lang] + f" {chan_link}"
        )
    elif text == MENU_BTN['reviews'][lang]:
        data['step'] = 'main'
        await message.answer({
                                 'ru': '–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤‚Ä¶',
                                 'hy': '’Ñ’•÷Ä ’∞’°’≥’°’≠’∏÷Ä’§’∂’•÷Ä’´ ’Ø’°÷Ä’Æ’´÷Ñ’∂’•÷Ä’®‚Ä¶',
                                 'en': 'Customer reviews‚Ä¶'
                             }[lang])
    else:
        # –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await message.answer({
                                 'ru': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
                                 'hy': '‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’°’º’°÷Ä’Ø’°’∂.',
                                 'en': 'Please choose a menu item.'
                             }[lang])
        return


@router.message(
    lambda msg: user_data.get(msg.chat.id, {}).get('step') == 'city_choose',
    F.text.in_(list(MENU_BTN['purchase'].values()))
)
async def choose_city(message: types.Message):
    chat_id = message.chat.id
    data = user_data[chat_id]
    lang = data['lang']
    token = data['token']

    logging.debug(f"choose_city fired: step={data['step']} text={message.text!r}")

    # Inline-–∫–Ω–æ–ø–∫–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏
    async with httpx.AsyncClient(headers={'Authorization': f'Bearer {token}'}) as client:
        resp = await client.get(f"{API_V1}/cities")
        resp.raise_for_status()

    cities = resp.json()['data']
    buttons = [
        [InlineKeyboardButton(text=city[f'name_{lang}'], callback_data=f'city:{city["id"]}')]
        for city in cities
    ]
    buttons.append([InlineKeyboardButton(text={'ru': 'üîô –ù–∞–∑–∞–¥', 'en': 'üîô Back'}[lang], callback_data='back_to_main')])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer({
                             'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
                             'hy': '‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’°’≤’°÷Ñ’®:',
                             'en': 'Select a city:'
                         }[lang], reply_markup=kb)

    data['step'] = 'city'


@router.callback_query(lambda c: c.data and c.data.startswith('city:'))
async def on_city_selected(call: types.CallbackQuery):
    chat_id = call.from_user.id
    data = user_data[chat_id]
    lang = data['lang']
    token = data['token']
    city_id = int(call.data.split(":", 1)[1])
    data['city_id'] = city_id

    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–π–æ–Ω—ã
    async with httpx.AsyncClient(
        headers={'Authorization': f'Bearer {token}'}
    ) as client:
        resp = await client.get(f"{API_V1}/districts?city_id={city_id}")
        resp.raise_for_status()
    districts = resp.json()['data']

    buttons = [
        [InlineKeyboardButton(text=d[f'name_{lang}'], callback_data=f'district:{d["id"]}')]
        for d in districts
    ]
    buttons.append([InlineKeyboardButton(text={'ru': 'üîô –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º'}[lang], callback_data='back_to_cities')])
    buttons.append([InlineKeyboardButton(text={'ru': '‚ùå –û—Ç–º–µ–Ω–∞'}[lang], callback_data='back_to_main')])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text(
        {
            'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:',
            'hy': '‘∏’∂’ø÷Ä’•÷Ñ ’©’°’≤’°’¥’°’Ω’®:',
            'en': 'Select a district:'
        }[lang],
        reply_markup=kb
    )
    data['step'] = 'district'
    await call.answer()


@router.callback_query(lambda c: c.data and c.data.startswith('product:'))
async def choose_packaging(call: types.CallbackQuery):
    chat_id = call.from_user.id
    data = user_data[chat_id]
    lang = data['lang']
    product_id = int(call.data.split(':', 1)[1])
    data['product_id'] = product_id
    token = data['token']

    # ‚Äî‚Äî‚Äî –±–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞—Å–æ–≤–æ–∫ ‚Äî‚Äî‚Äî
    params = {
        'city_id': data['city_id'],
        'district_id': data['district_id'],
        'product_id': product_id,
    }
    async with httpx.AsyncClient(
        headers={'Authorization': f'Bearer {token}'}
    ) as client:
        resp = await client.get(f"{API_V1}/packagings", params=params)
        resp.raise_for_status()

    packagings = resp.json()['data']
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
    buttons = [
        [InlineKeyboardButton(
            text=f"{pkg['volume']} ‚Äî {pkg['price']}$",
            callback_data=f'packaging:{pkg["id"]}'
        )]
        for pkg in packagings
        if pkg['product_id'] == product_id
    ]
    buttons.append([InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', callback_data='back_to_products')])
    buttons.append([InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='back_to_main')])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text(
        {
            'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É:',
            'hy': '‘∏’∂’ø÷Ä’•÷Ñ ÷É’°’©’•’©’°’æ’∏÷Ä’∏÷Ç’¥’®:',
            'en': 'Select packaging:'
        }[lang],
        reply_markup=kb
    )
    data['step'] = 'packaging'
    await call.answer()


@router.callback_query(lambda c: c.data and c.data.startswith('packaging:'))
async def ask_quantity(call: types.CallbackQuery):
    chat_id = call.from_user.id
    data = user_data[chat_id]
    packaging_id = int(call.data.split(':', 1)[1])
    data['packaging_id'] = packaging_id
    data['step'] = 'quantity'

    lang = data['lang']
    volume = call.message.reply_markup.inline_keyboard[0][0].text.split('‚Äî')[0].strip()

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text={'ru': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É', 'hy': '‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨ ‡∞ï‡±ä‡∞®÷Ñ', 'en': '‚úÖ Confirm purchase'}[lang],
            callback_data='confirm_qty'
        ),
        InlineKeyboardButton(
            text={'ru': 'üîô –ù–∞–∑–∞–¥', 'hy': 'üîô ’é’•÷Ä’°’§’°÷Ä’±’´', 'en': 'üîô Back'}[lang],
            callback_data='cancel_qty'
        ),
    ]])

    await call.message.edit_text(
        {
            'ru': f"\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            'hy': f"\n’ç’•’≤’¥’•÷Ñ ¬´’Ä’°’Ω’ø’°’ø’•’¨ ’£’∂’∏÷Ç’¥’®¬ª ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â",
            'en': f"\nClick ‚ÄúConfirm purchase‚Äù to proceed."
        }[lang],
        reply_markup=kb
    )
    await call.answer()


@router.callback_query(lambda c: c.data == 'confirm_qty')
async def on_confirm_qty(call: types.CallbackQuery):
    chat_id = call.from_user.id
    data = user_data[chat_id]
    lang = data['lang']

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º —à–∞–≥ –Ω–∞ –≤–≤–æ–¥ –∫–æ–¥–∞
    data['step'] = 'enter_coupon'

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –í–≤–µ—Å—Ç–∏ –∫–æ–¥ / –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text={'ru': '–í–≤–µ—Å—Ç–∏ –∫–æ–¥', 'hy': '‘≥÷Ä’•’¨ ’Ø’∏’§’®', 'en': 'Enter code'}[lang],
                             callback_data='coupon:enter'),
        InlineKeyboardButton(text={'ru': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'hy': '’ñ ’º’°’∫’Ω’Ø’´’∫', 'en': 'Skip'}[lang],
                             callback_data='coupon:skip'),
    ]])

    await call.message.answer({
                                  'ru': '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:',
                                  'hy': '‘µ’©’• ’∏÷Ç’∂’•÷Ñ ’©’°÷Ä’¥’°÷Å’∏÷Ç÷Å’´’π ’Ø’∏’§, ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’Ø’°’¥ ’Ω’•’≤’¥’•÷Ñ ¬´’ñ’º’°’∫’Ω’Ø’´’∫¬ª’ù',
                                  'en': 'If you have a promo code, enter it now or press ‚ÄúSkip‚Äù:'
                              }[lang], reply_markup=kb)
    await call.answer()

@router.callback_query(lambda c: c.data and c.data.startswith('coupon:'))
async def on_coupon_choice(call: types.CallbackQuery):
    chat_id = call.from_user.id
    data = user_data[chat_id]
    lang = data['lang']
    action = call.data.split(':',1)[1]

    if action == 'enter':
        # –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ —Å–∞–º –∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
        data['step'] = 'awaiting_coupon_code'
        await call.message.answer({
            'ru': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞:',
            'hy': '‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’±’•÷Ä ’©’°÷Ä’¥’°÷Å’¥’°’∂ ’Ø’∏’§’®’ù',
            'en': 'Please send your promo code as text:'
        }[lang])
        await call.answer()
    else:
        # –ø—Ä–æ–ø—É—Å–∫ ‚Äî —Å—Ä–∞–∑—É –∫ –æ–ø–ª–∞—Ç–µ
        data.pop('coupon_id', None)
        data['step'] = 'awaiting_payment'
        await create_order_item_and_pay(call.message)
        await call.answer()

@router.message(lambda m: user_data.get(m.chat.id,{}).get('step')=='awaiting_coupon_code')
async def receive_coupon_code(message: types.Message):
    chat_id = message.chat.id
    data = user_data[chat_id]
    lang = data['lang']
    text = message.text.strip()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ (–æ–∂–∏–¥–∞–µ–º, —á—Ç–æ —ç—Ç–æ ID –∫—É–ø–æ–Ω–∞ –∏–ª–∏ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞)
    # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω ID, –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è int(text)
    data['coupon_id'] = message.text.strip()

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ
    data['step'] = 'awaiting_payment'
    await message.answer({
        'ru': '–ü—Ä–æ–º–æ-–∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –æ–ø–ª–∞—Ç–µ‚Ä¶',
        'hy': '‘π’°÷Ä’¥’°÷Å’¥’°’∂ ’Ø’∏’§’® ’Ω’°’∞’¥’°’∂’æ’°’Æ ’ß, ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•’∂÷Ñ ’æ’≥’°÷Ä’¥’°’∂’®‚Ä¶',
        'en': 'Promo code set, proceeding to payment‚Ä¶'
    }[lang])
    await create_order_item_and_pay(message)

@router.callback_query(lambda c: c.data == 'cancel_qty')
async def on_cancel_qty(call: types.CallbackQuery):
    chat_id = call.from_user.id
    data = user_data[chat_id]
    lang = data['lang']
    token = data['token']

    # –∑–∞–Ω–æ–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞—Å–æ–≤–æ–∫
    params = {
        'city_id': data['city_id'],
        'district_id': data['district_id'],
        'product_id': data['product_id'],
    }
    async with httpx.AsyncClient(
        headers={'Authorization': f'Bearer {token}'}
    ) as client:
        resp = await client.get(f"{API_V1}/packagings", params=params)
        resp.raise_for_status()
    packagings = resp.json()['data']

    # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ choose_packaging
    buttons = [
        [InlineKeyboardButton(
            text=f"{pkg['volume']} ‚Äî {pkg['price']}$",
            callback_data=f'packaging:{pkg["id"]}'
        )]
        for pkg in packagings
        if pkg['product_id'] == data['product_id']
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —é–∑–µ—Ä —É–≤–∏–¥–µ–ª –∑–∞–Ω–æ–≤–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ñ–∞—Å–æ–≤–æ–∫
    await call.message.edit_text(
        {
            'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É:',
            'hy': '‘∏’∂’ø÷Ä’•÷Ñ ÷É’°’©’•’©’°’æ’∏÷Ä’∏÷Ç’¥’®:',
            'en': 'Select packaging:'
        }[lang],
        reply_markup=kb
    )

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–≥ –≤ —Å—Ç–æ—Ä–µ–¥–∂
    data['step'] = 'packaging'
    await call.answer()


# @router.message(lambda m: user_data.get(m.chat.id, {}).get('step') == 'quantity')
@router.callback_query(lambda c: user_data.get(c.from_user.id, {}).get('step') == 'awaiting_payment')
async def create_order_item_and_pay(message: types.Message):
    chat_id = message.chat.id
    data = user_data[chat_id]
    lang = data['lang']
    token = data['token']
    qty = 1

    # 2) —Å–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑–∞
    payload = {
        'order_id': data['order_id'],
        'packaging_id': data['packaging_id'],
        'quantity': qty,
    }
    async with httpx.AsyncClient(
        headers={'Authorization': f'Bearer {token}'}
    ) as client:
        resp = await client.post(f"{API_V1}/order-items", json=payload)
        resp.raise_for_status()
    item = resp.json()['data']

    data['stash_id'] = item['inventory_id']

    # 3) –≤—ã—á–∏—Å–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –≤ DASH
    pay_payload = {
        'order_id': data['order_id'],
        'coupon_id': data['coupon_id'],
        'apply_subscription_discount': data.get('apply_subscription_discount', False),
    }
    logging.info("PAYLOAD ‚Üí %r", pay_payload)
    async with httpx.AsyncClient(
        headers={'Authorization': f'Bearer {token}'}
    ) as client:
        pay_resp = await client.post(f"{API_V1}/payments/create", json=pay_payload)
        pay_resp.raise_for_status()
    pay = pay_resp.json()
    address = pay['payment_address']
    amount_dash = pay['amount_dash']

    # 5) —Ä–∏—Å—É–µ–º QR-–∫–æ–¥ —á–µ—Ä–µ–∑ Google Chart API
    qr_data = urllib.parse.quote(f"dash:{address}?amount={amount_dash}")
    qr_url = f"https://chart.googleapis.com/chart?cht=qr&chs=200x200&chl={qr_data}"

    # 6) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text={'ru': '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', 'hy': '‚úÖ ‘µ’Ω ’æ’≥’°÷Ä’•’¨ ’•’¥', 'en': '‚úÖ I have paid'}[lang],
            callback_data='check_payment'
        )]
    ])

    text = {
        'ru': (
            f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ ({qty}√ó{item['packaging']['volume']}).\n\n"
            f"üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ <b>{amount_dash} DASH</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>{address}</code>"
        ),
        'hy': (
            f"‚úÖ ’ä–æ–∑–∏—Ü–∏—è ’°’æ’•’¨’°÷Å’æ’•÷Å ({qty}√ó{item['packaging']['volume']}).\n\n"
            f"üí∞ ’é’≥’°÷Ä’•÷Ñ <b>{amount_dash} DASH</b> ’°’µ’Ω ’∞’°’Ω÷Å’•’´’∂’ù\n<code>{address}</code>"
        ),
        'en': (
            f"‚úÖ Item added ({qty}√ó{item['packaging']['volume']}).\n\n"
            f"üí∞ Please pay <b>{amount_dash} DASH</b> to:\n<code>{address}</code>"
        ),
    }[lang]

    await message.answer(
        f"{text}\n\nüîó <a href=\"{qr_url}\">–û—Ç–∫—Ä—ã—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>",
        reply_markup=kb,
        parse_mode='HTML'
    )

    # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    data['step'] = 'awaiting_payment'


@router.callback_query(lambda c: c.data == 'check_payment')
async def check_payment(call: types.CallbackQuery):
    chat_id = call.from_user.id
    data = user_data[chat_id]
    lang = data['lang']
    order_id = data['order_id']
    token = data['token']

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—ë–∂
    async with httpx.AsyncClient(
        headers={'Authorization': f'Bearer {token}'}
    ) as client:
        resp = await client.get(f"{API_V1}/payments/status/{order_id}")
        resp.raise_for_status()
    result = resp.json()['data']
    status = result['status']
    if status != 'paid':
        return await call.answer({
                                     'ru': '–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.',
                                     'hy': '’é’≥’°÷Ä’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨, ’∂’∏÷Ä’´÷Å ÷É’∏÷Ä’±’•÷Ñ:',
                                     'en': 'Payment not yet detected, please try again later.'
                                 }[lang], show_alert=True)

    # 2) –û–ø–ª–∞—Ç–∞ –µ—Å—Ç—å ‚Äî –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
    await call.message.edit_text({
                                     'ru': 'üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–æ—Ç –≤–∞—à –∫–ª–∞–¥:',
                                     'hy': 'üéâ ’é’≥’°÷Ä’∏÷Ç’¥’® ’Ω’ø’°÷Å’æ’•÷Å÷â ’Å’•÷Ä ’Ø’¨’°’§’∂ ’ß’ù',
                                     'en': 'üéâ Payment received! Here‚Äôs your stash:'
                                 }[lang])

    stash = result['stash']
    if not stash:
        return await call.message.answer({
                                             'ru': '–ö–ª–∞–¥ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª —Å–Ω–æ–≤–∞.',
                                             'hy': '‘ø’¨’°’§’® ’§’•’º ’∫’°’ø÷Ä’°’Ω’ø ’π’ß, ’∂’∏÷Ä’´÷Å ’Ω’•’≤’¥’•÷Ñ’ù ¬´‚úÖ ‘µ’Ω ’æ’≥’°÷Ä’•’¨ ’•’¥¬ª.',
                                             'en': 'Your stash isn‚Äôt ready yet, please wait a bit and press ‚Äú‚úÖ I have paid‚Äù again.'
                                         }[lang])

    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    photo_url = stash.get('photo_url') or stash.get('photo')
    caption = f"{stash['packaging']['volume']} ‚Äî {stash['packaging']['price']}$"
    #     await call.message.answer_photo(
    #         photo=photo_url,
    #         caption={
    #             'ru':'üéÅ –í–æ—Ç –≤–∞—à –∫–ª–∞–¥! –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ —Ñ–æ—Ç–æ, –æ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ.',
    #             'hy':'üéÅ ‘±’∞’° ’±’•÷Ä ’Ø’¨’°’§’®÷â ’Ñ’´’õ ’Ø’∏÷Ä÷Å÷Ä’•÷Ñ ’¨’∏÷Ç’Ω’°’∂’Ø’°÷Ä’®’ù ’¥’•’Ø’°’∂’£’°’¥’µ’° ’ß÷â',
    #             'en':'üéÅ Here‚Äôs your stash! Keep this photo‚Äîit‚Äôs one-time only.'
    #         }[lang]
    #     )
    try:
        await call.message.answer_photo(
            photo=stash.get('photo_url') or stash.get('photo'),
            caption=f"{stash['packaging']['volume']} ‚Äî {stash['packaging']['price']}$"
        )
    except:
        await call.message.answer(
            f"{caption}\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ: {photo_url}"
        )

    # 6) –ò –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    data['step'] = 'main'
    btn = {
        'ru': 'üõí –ö—É–ø–∏—Ç—å',
        'hy': 'üõí ‘≥’∂’•’¨',
        'en': 'üõí Buy'
    }[lang]
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=btn)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await call.message.answer({
                                  'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                  'hy': '‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:',
                                  'en': 'Choose an action:'
                              }[lang], reply_markup=kb)


@router.callback_query(lambda c: c.data and c.data.startswith('district:'))
async def on_district_selected(call: types.CallbackQuery):
    chat_id = call.from_user.id
    data = user_data[chat_id]
    lang = data['lang']
    token = data['token']
    district_id = int(call.data.split(':', 1)[1])
    data['district_id'] = district_id

    # 1) –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    order_payload = {
        'user_id': data['user_id'],
        'city_id': data['city_id'],
        'district_id': district_id,
        'coupon_id': data.get('coupon_id'),  # –ø–µ—Ä–µ–¥–∞—ë–º –∫—É–ø–æ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å
        'apply_subscription_discount': data.get('apply_subscription_discount', False),
    }
    async with httpx.AsyncClient(
        headers={'Authorization': f'Bearer {token}'}
    ) as client:
        resp = await client.post(f"{API_V1}/orders", json=order_payload)
        resp.raise_for_status()
    order = resp.json()['data']
    data['order_id'] = order['id']

    # 2) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    async with httpx.AsyncClient(
        headers={'Authorization': f'Bearer {token}'}
    ) as client:
        resp = await client.get(f"{API_V1}/products", params={
            'city_id': data['city_id'],
            'district_id': data['district_id'],
        })
        resp.raise_for_status()
    products = resp.json()['data']

    buttons = [
        [InlineKeyboardButton(text=p[f'name_{lang}'], callback_data=f'product:{p["id"]}')]
        for p in products
    ]
    buttons.append([InlineKeyboardButton(text={'ru': 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º', 'en': 'üîô Back'}[lang], callback_data='back_to_districts')])
    buttons.append([InlineKeyboardButton(text={'ru': '‚ùå –û—Ç–º–µ–Ω–∞', 'en': '‚ùå Cancel'}[lang], callback_data='back_to_main')])



    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text(
        {
            'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
            'hy': '‘∏’∂’ø÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’®:',
            'en': 'Select a product:'
        }[lang],
        reply_markup=kb
    )

    data['step'] = 'product'
    await call.answer()

@router.callback_query(lambda c: c.data == 'back_to_main')
async def back_to_main(c: types.CallbackQuery):
    uid = c.from_user.id
    user_data[uid]['step'] = 'main'
    await c.answer()
    # —Ç—É—Ç –≤—ã–∑–≤–∞—Ç—å —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ –∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´üìã –ú–µ–Ω—é¬ª
    await show_main_menu(c.message)

@router.callback_query(lambda c: c.data == 'back_to_cities')
async def back_to_cities(cq: types.CallbackQuery):
    chat_id = cq.from_user.id
    data    = user_data[chat_id]
    lang    = data['lang']
    token   = data['token']

    # 1) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    async with httpx.AsyncClient(headers={'Authorization': f'Bearer {token}'}) as cli:
        resp = await cli.get(f"{API_V1}/cities")
        resp.raise_for_status()
    cities = resp.json().get('data', [])

    # 2) –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = [
        [InlineKeyboardButton(text=c[f'name_{lang}'], callback_data=f"city:{c['id']}")]
        for c in cities
    ]
    buttons.append([
        InlineKeyboardButton(
            text={'ru':'‚ùå –û—Ç–º–µ–Ω–∞','hy':'‚ùå ’â’•’≤’°÷Ä’Ø’•’¨','en':'‚ùå Cancel'}[lang],
            callback_data='back_to_main'
        )
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # 3) –†–∏—Å—É–µ–º
    await cq.message.edit_text(
        {
            'ru': '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
            'hy': '‚úèÔ∏è ‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’°’≤’°÷Ñ’®’ù',
            'en': '‚úèÔ∏è Select a city:'
        }[lang],
        reply_markup=kb
    )

    # 4) –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
    data['step'] = 'city'
    await cq.answer()
@router.callback_query(lambda c: c.data == 'back_to_districts')
async def back_to_districts(cq: types.CallbackQuery):
    chat_id = cq.from_user.id
    data    = user_data[chat_id]
    lang    = data['lang']
    token   = data['token']
    city_id = data.get('city_id')

    if not city_id:
        return await cq.answer("–ù–µ—á–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å", show_alert=True)

    # 1) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–π–æ–Ω—ã –ø–æ city_id
    async with httpx.AsyncClient(headers={'Authorization': f'Bearer {token}'}) as cli:
        resp = await cli.get(f"{API_V1}/districts", params={'city_id': city_id})
        resp.raise_for_status()
    districts = resp.json().get('data', [])

    # 2) –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = [
        [InlineKeyboardButton(text=d[f'name_{lang}'], callback_data=f"district:{d['id']}")]
        for d in districts
    ]
    buttons.append([
        InlineKeyboardButton(
            text={'ru':'üîô –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º','hy':'üîô ’é’•÷Ä’°’§’°÷Ä’± ÷Ñ’°’≤’°÷Ñ’∂’•÷Ä','en':'üîô Back to cities'}[lang],
            callback_data='back_to_cities'
        )
    ])
    buttons.append([
        InlineKeyboardButton(
            text={'ru':'‚ùå –û—Ç–º–µ–Ω–∞','hy':'‚ùå ’â’•’≤’°÷Ä’Ø’•’¨','en':'‚ùå Cancel'}[lang],
            callback_data='back_to_main'
        )
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # 3) –†–∏—Å—É–µ–º
    await cq.message.edit_text(
        {
            'ru': '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:',
            'hy': '‚úèÔ∏è ‘∏’∂’ø÷Ä’•÷Ñ ’©’°’≤’°’¥’°’Ω’®’ù',
            'en': '‚úèÔ∏è Select a district:'
        }[lang],
        reply_markup=kb
    )

    # 4) –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
    data['step'] = 'district'
    await cq.answer()


@router.callback_query(lambda c: c.data == 'back_to_products')
async def back_to_products(cq: types.CallbackQuery):
    chat_id = cq.from_user.id
    data    = user_data[chat_id]
    lang    = data['lang']
    token   = data['token']
    city_id     = data.get('city_id')
    district_id = data.get('district_id')

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not city_id or not district_id:
        return await cq.answer("–ù–µ—á–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å", show_alert=True)

    # 2) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    async with httpx.AsyncClient(headers={'Authorization': f'Bearer {token}'}) as cli:
        resp = await cli.get(f"{API_V1}/products", params={
            'city_id':     city_id,
            'district_id': district_id,
        })
        resp.raise_for_status()
    products = resp.json().get('data', [])

    # 3) –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = [
        [InlineKeyboardButton(text=p[f'name_{lang}'], callback_data=f'product:{p["id"]}')]
        for p in products
    ]
    buttons.append([
        InlineKeyboardButton(
            text={'ru':'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º','hy':'üîô ’é’•÷Ä’°’§’°÷Ä’± ’©’°’≤’°’¥’°’Ω’•÷Ä','en':'üîô Back to districts'}[lang],
            callback_data='back_to_districts'
        )
    ])
    buttons.append([
        InlineKeyboardButton(
            text={'ru':'‚ùå –û—Ç–º–µ–Ω–∞','hy':'‚ùå ’â’•’≤’°÷Ä’Ø’•’¨','en':'‚ùå Cancel'}[lang],
            callback_data='back_to_main'
        )
    ])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # 4) –†–∏—Å—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
    await cq.message.edit_text(
        {
            'ru':'‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
            'hy':'‚úèÔ∏è ‘∏’∂’ø÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’®’ù',
            'en':'‚úèÔ∏è Select a product:'
        }[lang],
        reply_markup=kb
    )

    # 5) –ú–µ–Ω—è–µ–º step
    data['step'] = 'product'
    await cq.answer()
