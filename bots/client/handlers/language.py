import os, httpx
from aiogram import Router, types

from client.handlers.flow import main_menu_router, make_main_menu
from client.handlers.storage import user_data

router = Router()
API_BASE = os.getenv('API_BASE_URL')
LANG_BTN = {
    'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
    'hy': 'üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂',
    'en': 'üá¨üáß English',
}

# 1) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–æ–≤–Ω–æ –Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑
@router.message(lambda msg: user_data.get(msg.chat.id, {}).get('step') == 'show_language_keyboard')
async def ask_language(message: types.Message):
    chat_id = message.chat.id
    data    = user_data[chat_id]
    # —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–¥–∏—é ¬´–∂–¥—ë–º –≤—ã–±–æ—Ä¬ª
    data['step'] = 'await_language'

    buttons = [[ types.KeyboardButton(text=v) for v in LANG_BTN.values() ]]
    kb = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / ‘∏’∂’ø÷Ä’•÷Ñ ’¨’•’¶’∏÷Ç’∂ / Choose language",
        reply_markup=kb
    )

# 2) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞ —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(lambda msg:
    user_data.get(msg.chat.id, {}).get('step') == 'await_language'
    and msg.text in LANG_BTN.values()
)
async def set_language_and_login(message: types.Message):
    chat_id = message.chat.id
    code = next(k for k,v in LANG_BTN.items() if v == message.text)
    data = user_data[chat_id]
    data['lang'] = code

    # —Ç—É—Ç –≤–∞—à /auth/bot-login, –ø–æ–ª—É—á–∞–µ–º token –∏ user_id
    async with httpx.AsyncClient() as cli:
        resp = await cli.post(f"{os.getenv('API_BASE_URL')}/v1/auth/bot-login",
                              json={'telegram_id': chat_id})
    payload = resp.json().get('data') or {}
    data['token']   = payload.get('token')
    data['user_id'] = payload.get('user',{}).get('id')

    # –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é,
    # –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–∑ settings
    channel = data['settings'].get('channel_link')
    if channel:
        try:
            member = await message.bot.get_chat_member(chat_id=channel, user_id=chat_id)
            if member.status in ('left','kicked'):
                return await message.answer(
                    f"üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel} –¥–ª—è —Å–∫–∏–¥–∫–∏"
                )
        except:
            pass

    data['step'] = 'main'
    kb = make_main_menu(code)
    await message.answer(
        {'ru':'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:','hy':'‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:','en':'Choose action:'}[code],
        reply_markup=kb
    )
