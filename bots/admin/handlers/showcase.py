import logging
import os
import httpx
from aiogram import Router, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from admin.handlers.auth import AuthStates

from admin.handlers.common_states import MainStates

API_V1 = os.getenv("API_BASE_URL").rstrip("/") + "/v1"

router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ShowcaseStates(StatesGroup):
    choose_action = State()
    add_select_city = State()
    add_select_district = State()
    add_select_item = State()
    add_select_packaging = State()
    add_confirm = State()
    add_upload_photo = State()

    view_select_city = State()
    view_select_district = State()
    view_manage_items = State()

    edit_enter_quantity = State()
    edit_upload_photo = State()
    edit_confirm = State()

    # Product CRUD
    prod_create_name = State()
    prod_create_desc = State()
    prod_confirm_create = State()
    prod_edit_select = State()
    prod_edit_field = State()
    prod_edit_value = State()
    prod_confirm_edit = State()

    # Packaging CRUD
    pack_create_select_prod = State()
    pack_create_volume = State()
    pack_create_price = State()
    pack_confirm_create = State()
    pack_edit_select = State()
    pack_edit_field = State()
    pack_edit_value = State()
    pack_confirm_edit = State()


async def show_showcase_menu(msg: types.Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–∏—Ç—Ä–∏–Ω—ã: –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä / –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏—Ç—Ä–∏–Ω—É / –Ω–∞–∑–∞–¥"""
    data = await state.get_data()
    role = data["role"]

    builder = InlineKeyboardBuilder()
    # –ö—É—Ä—å–µ—Ä—ã –∏ –≤—Å–µ –∞–¥–º–∏–Ω—ã/–º–µ–Ω–µ–¥–∂–µ—Ä—ã
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="sc_add_product")
    if role != 'courier':
        builder.button(text="üì¶ –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="sc_prod_create")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞—Å–æ–≤–∫—É", callback_data="sc_pack_create")
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞—Å–æ–≤–∫—É", callback_data="sc_pack_edit")
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="sc_prod_edit")
        builder.button(text="üõí –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏—Ç—Ä–∏–Ω—ã", callback_data="sc_view_showcase")

    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(2)

    await msg.edit_text(
        "üõç *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏—Ç—Ä–∏–Ω–æ–π* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=builder.as_markup(),
    )


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# 1) –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π ¬´–≤–∏—Ç—Ä–∏–Ω–∞¬ª –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(
    AuthStates.authenticated,
    StateFilter(MainStates.choosing_scenario),
    lambda c: c.data == "sc_showcase"
)
async def enter_showcase(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(ShowcaseStates.choose_action)
    await show_showcase_menu(cq.message, state)


# 2) –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –∏–∑ —à–∞–≥–∞ choose_action
@router.callback_query(ShowcaseStates.choose_action, lambda c: c.data == "back_to_main")
async def sc_back_to_main(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    from admin.handlers.menu import cmd_menu
    await state.set_state(MainStates.choosing_scenario)
    await cmd_menu(cq.message, state)


_INTERNAL = [
    ShowcaseStates.add_select_city,
    ShowcaseStates.add_select_district,
    ShowcaseStates.add_select_item,
    ShowcaseStates.add_select_packaging,
    ShowcaseStates.add_upload_photo,
    ShowcaseStates.view_select_city,
    ShowcaseStates.view_select_district,
    ShowcaseStates.view_manage_items,
]


@router.callback_query(StateFilter(*_INTERNAL), lambda c: c.data == "sc_back")
async def sc_back_to_showcase(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(ShowcaseStates.choose_action)
    await show_showcase_menu(cq.message, state)


@router.callback_query(ShowcaseStates.choose_action, lambda c: c.data == "sc_add_product")
async def sc_add_product(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(ShowcaseStates.add_select_city)

    # 2.1) –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    token = (await state.get_data())["token"]
    resp = await httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ).get(f"{API_V1}/cities")
    cities = resp.json().get("data", [])
    b = InlineKeyboardBuilder()
    for c in cities:
        b.button(text=f"{c['id']} ‚Äî {c['name_ru']}", callback_data=f"sc_city_{c['id']}")
    b.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_back")
    b.adjust(1)

    await cq.message.edit_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=b.as_markup())


@router.callback_query(ShowcaseStates.add_select_city, lambda c: c.data.startswith("sc_city_"))
async def sc_choose_city(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    city_id = int(cq.data.split("_")[-1])
    await state.update_data(city_id=city_id)
    await state.set_state(ShowcaseStates.add_select_district)

    # GET /v1/districts –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ city_id
    token = (await state.get_data())["token"]
    resp = await httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ).get(f"{API_V1}/districts")
    districts = [d for d in resp.json().get("data", []) if d["city_id"] == city_id]

    b = InlineKeyboardBuilder()
    for d in districts:
        b.button(text=f"{d['id']} ‚Äî {d['name_ru']}", callback_data=f"sc_district_{d['id']}")
    b.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_back")
    b.adjust(1)

    await cq.message.edit_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=b.as_markup())


@router.callback_query(ShowcaseStates.add_select_district, lambda c: c.data.startswith("sc_district_"))
async def sc_choose_district(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    district_id = int(cq.data.split("_")[-1])
    await state.update_data(district_id=district_id)
    await state.set_state(ShowcaseStates.add_select_item)

    # GET /v1/products?city_id&district_id
    data = await state.get_data()
    token = data["token"]
    params = {"city_id": data["city_id"], "district_id": district_id}
    resp = await httpx.AsyncClient(headers={"Authorization": f"Bearer {token}"}).get(
        f"{API_V1}/products", params=params
    )
    products = resp.json().get("data", [])

    b = InlineKeyboardBuilder()
    for p in products:
        b.button(text=f"{p['id']} ‚Äî {p.get('name_ru')}", callback_data=f"sc_prod_{p['id']}")
    b.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_back")
    b.adjust(1)

    await cq.message.edit_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=b.as_markup())


@router.callback_query(ShowcaseStates.add_select_item, lambda c: c.data.startswith("sc_prod_"))
async def sc_choose_product(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    prod_id = int(cq.data.split("_")[-1])
    await state.update_data(product_id=prod_id)
    await state.set_state(ShowcaseStates.add_select_packaging)

    # GET /v1/products/{prod_id}
    token = (await state.get_data())["token"]
    resp = await httpx.AsyncClient(headers={"Authorization": f"Bearer {token}"}).get(
        f"{API_V1}/products/{prod_id}"
    )
    packagings = resp.json().get("data", {}).get("packagings", [])

    b = InlineKeyboardBuilder()
    for pack in packagings:
        text = f"{pack['id']} ‚Äî {pack.get('name_ru') or pack.get('volume')}"
        b.button(text=text, callback_data=f"sc_pack_{pack['id']}")
    b.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_back")
    b.adjust(1)

    await cq.message.edit_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É:", reply_markup=b.as_markup())


@router.callback_query(ShowcaseStates.add_select_packaging, lambda c: c.data.startswith("sc_pack_"))
async def sc_choose_packaging(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    pack_id = int(cq.data.split("_")[-1])
    await state.update_data(packaging_id=pack_id, quantity=1)
    await state.set_state(ShowcaseStates.add_upload_photo)
    await cq.message.edit_text(
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        parse_mode="Markdown"
    )

@router.message(ShowcaseStates.add_upload_photo)
async def sc_upload_photo(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    token = data["token"]

    if msg.text == "/skip":
        photo_url = None
    elif msg.photo:
        file = await msg.bot.get_file(msg.photo[-1].file_id)
        photo_url = f"https://api.telegram.org/file/bot{msg.bot.token}/{file.file_path}"
    else:
        return await msg.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ /skip.")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ state
    await state.update_data(photo_url=photo_url)

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(ShowcaseStates.add_confirm)

    # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–ª–∞–¥", callback_data="sc_confirm_add")
    builder.button(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å –∫–ª–∞–¥", callback_data="sc_cancel_add")
    builder.adjust(2)

    await msg.answer(
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∞–¥–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(ShowcaseStates.add_confirm, lambda c: c.data == "sc_confirm_add")
async def sc_confirm_add(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    data = await state.get_data()
    token = data["token"]
    payload = {
        "city_id": data["city_id"],
        "district_id": data["district_id"],
        "packaging_id": data["packaging_id"],
        "quantity": data["quantity"],
        "photo_url": data["photo_url"],
        "status": "confirmed"
    }
    resp = await httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ).post(f"{API_V1}/inventories", json=payload)

    if resp.status_code in (200, 201):
        inv = resp.json().get("inventory")
        await cq.message.answer(f"‚úÖ –ö–ª–∞–¥ #{inv['id']} —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
    else:
        await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–¥–∞.")

    # –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é –≤–∏—Ç—Ä–∏–Ω—ã
    await state.set_state(ShowcaseStates.choose_action)
    await show_showcase_menu(cq.message, state)

@router.callback_query(ShowcaseStates.add_confirm, lambda c: c.data == "sc_cancel_add")
async def sc_cancel_add(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É –∑–∞–Ω–æ–≤–æ", show_alert=True)
    data = await state.get_data()
    prod_id = data["product_id"]

    # –∑–∞–Ω–æ–≤–æ —Å—Ç—Ä–æ–∏–º –º–µ–Ω—é —Ñ–∞—Å–æ–≤–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    token = data["token"]
    resp = await httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ).get(f"{API_V1}/products/{prod_id}")
    packagings = resp.json().get("data", {}).get("packagings", [])

    builder = InlineKeyboardBuilder()
    for pack in packagings:
        text = pack.get("name") or pack.get("volume", "")
        builder.button(text=f"{pack['id']} ‚Äî {text}", callback_data=f"sc_pack_{pack['id']}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="sc_back")
    builder.adjust(1)

    await state.set_state(ShowcaseStates.add_select_packaging)
    await cq.message.edit_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É:", reply_markup=builder.as_markup())


@router.callback_query(ShowcaseStates.choose_action, lambda c: c.data == "sc_view_showcase")
async def sc_view_showcase(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(ShowcaseStates.view_select_city)

    token = (await state.get_data())["token"]
    resp = await httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ).get(f"{API_V1}/cities")
    cities = resp.json().get("data", [])

    b = InlineKeyboardBuilder()
    for c in cities:
        b.button(text=f"{c['id']} ‚Äî {c['name_ru']}", callback_data=f"vs_city_{c['id']}")
    b.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_back")
    b.adjust(1)
    await cq.message.edit_text("üõí –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=b.as_markup())


@router.callback_query(ShowcaseStates.view_select_city, lambda c: c.data.startswith("vs_city_"))
async def sc_vs_city(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    cid = int(cq.data.split("_")[-1])
    await state.update_data(city_id=cid)
    await state.set_state(ShowcaseStates.view_select_district)

    token = (await state.get_data())["token"]
    resp = await httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ).get(f"{API_V1}/districts")
    districts = [d for d in resp.json().get("data", []) if d["city_id"] == cid]

    b = InlineKeyboardBuilder()
    for d in districts:
        b.button(text=f"{d['id']} ‚Äî {d['name_ru']}", callback_data=f"vs_dist_{d['id']}")
    b.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_back")
    b.adjust(1)
    await cq.message.edit_text("üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=b.as_markup())


@router.callback_query(ShowcaseStates.view_select_district, lambda c: c.data.startswith("vs_dist_"))
async def sc_vs_district(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    dist = int(cq.data.split("_")[-1])
    await state.update_data(district_id=dist)
    await state.set_state(ShowcaseStates.view_manage_items)

    # GET /v1/inventories?city_id&district_id&status=confirmed
    data = await state.get_data()
    token = data["token"]
    params = {"city_id": data["city_id"], "district_id": dist, "status": "confirmed"}
    resp = await httpx.AsyncClient(headers={"Authorization": f"Bearer {token}"}).get(
        f"{API_V1}/inventories", params=params
    )
    invs = resp.json().get("data", [])

    text = "\n".join(
        f"#{i['id']}: —Ñ–∞—Å–æ–≤–∫–∞ {i['packaging']['id']}, "
        f"–∫–æ–ª-–≤–æ {i['quantity']} –≥. –¢–æ–≤–∞—Ä: {i['packaging']['product']['name_ru']}  "
        f'<a href="{i["photo_url"]}">–§–û–¢–û</a>'
        for i in invs
    )

    b = InlineKeyboardBuilder()
    for i in invs:
        b.button(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å #{i['id']}", callback_data=f"inv_del_{i['id']}")
        b.button(text=f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å #{i['id']}", callback_data=f"inv_edit_{i['id']}")
    b.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="sc_view_showcase")
    b.adjust(1)

    await cq.message.edit_text("üõí *–¢–µ–∫—É—â–∏–µ –∫–ª–∞–¥—ã:*\n" + text,
                               parse_mode="HTML",
                               reply_markup=b.as_markup(),
                               disable_web_page_preview=True)


@router.callback_query(ShowcaseStates.view_manage_items, lambda c: c.data.startswith("inv_edit_"))
async def sc_start_edit(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    inv_id = int(cq.data.split("_")[-1])
    await state.update_data(edit_inv_id=inv_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∞–¥–∞
    token = (await state.get_data())["token"]
    resp = await httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ).get(f"{API_V1}/inventories/{inv_id}")
    inv = resp.json().get("data", {})

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await state.set_state(ShowcaseStates.edit_enter_quantity)
    await cq.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–¥–∞ #{inv_id}\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {inv['quantity']}\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):"
    )


@router.message(ShowcaseStates.edit_enter_quantity)
async def sc_edit_enter_quantity(msg: types.Message, state: FSMContext):
    qty = msg.text.strip()
    if not qty.isdigit():
        return await msg.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    await state.update_data(new_quantity=int(qty))
    await state.set_state(ShowcaseStates.edit_upload_photo)
    await msg.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ:")


@router.message(ShowcaseStates.edit_upload_photo)
async def sc_edit_upload_photo(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    if msg.text == "/skip":
        # –ø—Ä–∏–∑–Ω–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ —Ñ–æ—Ç–æ
        await state.update_data(new_photo_url=None, keep_old_photo=True)
    elif msg.photo:
        file = await msg.bot.get_file(msg.photo[-1].file_id)
        url = f"https://api.telegram.org/file/bot{msg.bot.token}/{file.file_path}"
        await state.update_data(new_photo_url=url, keep_old_photo=False)
    else:
        return await msg.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ /skip.")

    await state.set_state(ShowcaseStates.edit_confirm)

    b = InlineKeyboardBuilder()
    b.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="sc_confirm_edit")
    b.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="sc_cancel_edit")
    b.adjust(2)

    await msg.answer(
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ:",
        reply_markup=b.as_markup()
    )


@router.callback_query(ShowcaseStates.edit_confirm, lambda c: c.data == "sc_confirm_edit")
async def sc_confirm_edit(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    data = await state.get_data()
    inv_id = data["edit_inv_id"]
    payload = {"quantity": data["new_quantity"]}
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    if not data.get("keep_old_photo"):
        payload["photo_url"] = data.get("new_photo_url")

    token = data["token"]
    resp = await httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ).put(f"{API_V1}/inventories/{inv_id}", json=payload)

    if resp.status_code == 200:
        await cq.message.answer(f"‚úÖ –ö–ª–∞–¥ #{inv_id} –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")

    # –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–∏—Ç—Ä–∏–Ω—ã
    await state.set_state(ShowcaseStates.choose_action)
    await show_showcase_menu(cq.message, state)


@router.callback_query(ShowcaseStates.edit_confirm, lambda c: c.data == "sc_cancel_edit")
async def sc_cancel_edit(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", show_alert=True)
    await state.set_state(ShowcaseStates.choose_action)
    await show_showcase_menu(cq.message, state)


@router.callback_query(ShowcaseStates.view_manage_items, lambda c: c.data.startswith("inv_del_"))
async def sc_delete_inv(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    inv_id = int(cq.data.split("_")[-1])
    token = (await state.get_data())["token"]
    resp = await httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ).delete(f"{API_V1}/inventories/{inv_id}")
    if resp.status_code in (200, 204):
        await cq.message.answer(f"‚úÖ –ö–ª–∞–¥ #{inv_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
    # –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await state.set_state(ShowcaseStates.choose_action)
    await show_showcase_menu(cq.message, state)


@router.callback_query(ShowcaseStates.choose_action, lambda c: c.data == "sc_back")
async def sc_back(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    from admin.handlers.menu import cmd_menu
    await state.set_state(MainStates.choosing_scenario)
    await cmd_menu(cq.message, state)



# -------- Product Create --------
@router.callback_query(ShowcaseStates.choose_action, lambda c: c.data == "sc_prod_create")
async def sc_prod_create(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(ShowcaseStates.prod_create_name)
    await cq.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RU|EN|HY:")

@router.message(ShowcaseStates.prod_create_name)
async def prod_name(msg: types.Message, state: FSMContext):
    parts = msg.text.split("|")
    if len(parts) != 3:
        return await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: RU|EN|HY")
    await state.update_data(name_ru=parts[0].strip(), name_en=parts[1].strip(), name_hy=parts[2].strip())
    await state.set_state(ShowcaseStates.prod_create_desc)
    await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RU|EN|HY:")

@router.message(ShowcaseStates.prod_create_desc)
async def prod_desc(msg: types.Message, state: FSMContext):
    parts = msg.text.split("|")
    if len(parts) != 3:
        return await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: RU|EN|HY")
    await state.update_data(desc_ru=parts[0].strip(), desc_en=parts[1].strip(), desc_hy=parts[2].strip())
    data = await state.get_data()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="sc_prod_confirm_create")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="sc_cancel_to_showcase")
    kb.adjust(2)
    text = (
        f"üìã –¢–æ–≤–∞—Ä:\n"
        f"Name RU: {data['name_ru']}, EN: {data['name_en']}, HY: {data['name_hy']}\n"
        f"Desc RU: {data['desc_ru']}, EN: {data['desc_en']}, HY: {data['desc_hy']}"
    )
    await msg.answer(text, reply_markup=kb.as_markup())
    await state.set_state(ShowcaseStates.prod_confirm_create)

@router.callback_query(ShowcaseStates.prod_confirm_create, lambda c: c.data == "sc_prod_confirm_create")
async def prod_confirm_create(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    data = await state.get_data()
    token = data['token']
    payload = {
        'name_ru': data['name_ru'], 'name_en': data['name_en'], 'name_hy': data['name_hy'],
        'description_ru': data['desc_ru'], 'description_en': data['desc_en'], 'description_hy': data['desc_hy']
    }
    logger.info("Sending create product request: %s", payload)
    resp = await httpx.AsyncClient(headers={'Authorization':f'Bearer {token}'}).post(f"{API_V1}/products", json=payload)
    if resp.status_code in (200,201):
        # logger.info("Product %s updated successfully", data['edit_prod_id'])
        prod = resp.json().get('data',{})
        await cq.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{prod.get('id')} —Å–æ–∑–¥–∞–Ω.")
    else:
        # logger.info("Product update failed: %s %s", resp.status_code, resp.text)
        await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.")
    await state.set_state(ShowcaseStates.choose_action)
    await show_showcase_menu(cq.message, state)

# -------- Product Edit --------
@router.callback_query(ShowcaseStates.choose_action, lambda c: c.data == "sc_prod_edit")
async def sc_prod_edit(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    token = (await state.get_data())['token']
    resp = await httpx.AsyncClient(headers={'Authorization':f'Bearer {token}'}).get(f"{API_V1}/products")
    prods = resp.json().get('data',[])
    kb = InlineKeyboardBuilder()
    for p in prods:
        kb.button(text=f"{p['id']} ‚Äî {p['name_ru']}", callback_data=f"prod_edit_{p['id']}")
    kb.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_cancel_to_showcase")
    kb.adjust(1)
    await cq.message.edit_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb.as_markup())

@router.callback_query(ShowcaseStates.prod_edit_select, lambda c: c.data.startswith("prod_edit_"))
async def prod_edit_select(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    pid = int(cq.data.split("_")[-1])
    await state.update_data(edit_prod_id=pid)
    # choose field
    kb = InlineKeyboardBuilder()
    for fld in ['name_ru','name_en','name_hy','description_ru','description_en','description_hy']:
        kb.button(text=fld, callback_data=f"prod_field_{fld}")
    kb.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_cancel_to_showcase")
    kb.adjust(2)
    await state.set_state(ShowcaseStates.prod_edit_field)
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb.as_markup())

@router.callback_query(ShowcaseStates.prod_edit_field, lambda c: c.data.startswith("prod_field_"))
async def prod_edit_field(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    field = cq.data.split("_")[-1]
    await state.update_data(edit_field=field)
    await state.set_state(ShowcaseStates.prod_edit_value)
    await cq.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")

@router.message(ShowcaseStates.prod_edit_value)
async def prod_edit_value(msg: types.Message, state: FSMContext):
    await state.update_data(edit_value=msg.text)
    data = await state.get_data()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="sc_prod_confirm_edit")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sc_cancel_to_showcase")
    kb.adjust(2)
    await msg.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ {data['edit_field']} -> {data['edit_value']}?", reply_markup=kb.as_markup())
    await state.set_state(ShowcaseStates.prod_confirm_edit)

@router.callback_query(ShowcaseStates.prod_confirm_edit, lambda c: c.data=="sc_prod_confirm_edit")
async def prod_confirm_edit(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    data=await state.get_data(); token=data['token']
    payload={data['edit_field']: data['edit_value']}
    resp=await httpx.AsyncClient(headers={'Authorization':f'Bearer {token}'}).put(
        f"{API_V1}/products/{data['edit_prod_id']}", json=payload
    )
    if resp.status_code==200:
        await cq.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{data['edit_prod_id']} –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    await state.set_state(ShowcaseStates.choose_action)
    await show_showcase_menu(cq.message,state)

# -------- Packaging Create --------
@router.callback_query(ShowcaseStates.choose_action, lambda c: c.data == "sc_pack_create")
async def sc_pack_create(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    token=(await state.get_data())['token']
    resp=await httpx.AsyncClient(headers={'Authorization':f'Bearer {token}'}).get(f"{API_V1}/products")
    prods=resp.json().get('data',[])
    kb=InlineKeyboardBuilder()
    for p in prods:
        kb.button(text=f"{p['id']} ‚Äî {p['name_ru']}", callback_data=f"pack_create_prod_{p['id']}")
    kb.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_cancel_to_showcase")
    kb.adjust(1)
    await state.set_state(ShowcaseStates.pack_create_select_prod)
    await cq.message.edit_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ñ–∞—Å–æ–≤–∫–∏:", reply_markup=kb.as_markup())

@router.callback_query(ShowcaseStates.pack_create_select_prod, lambda c: c.data.startswith("pack_create_prod_"))
async def pack_select_prod(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    pid=int(cq.data.split("_")[-1]); await state.update_data(pack_prod_id=pid)
    await state.set_state(ShowcaseStates.pack_create_volume)
    await cq.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º —Ñ–∞—Å–æ–≤–∫–∏ (—á–∏—Å–ª–æ):")

@router.message(ShowcaseStates.pack_create_volume)
async def pack_volume(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit(): return await msg.answer("‚ùå –¶–µ–ª–æ–µ —á–∏—Å–ª–æ")
    await state.update_data(pack_volume=int(msg.text))
    await state.set_state(ShowcaseStates.pack_create_price)
    await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ñ–∞—Å–æ–≤–∫–∏:")

@router.message(ShowcaseStates.pack_create_price)
async def pack_price(msg: types.Message, state: FSMContext):
    try: price=float(msg.text)
    except: return await msg.answer("‚ùå –ß–∏—Å–ª–æ")
    await state.update_data(pack_price=price)
    data=await state.get_data()
    kb=InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="sc_pack_confirm_create")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="sc_cancel_to_showcase")
    kb.adjust(2)
    text=f"üìã –§–∞—Å–æ–≤–∫–∞: prod={data['pack_prod_id']}, vol={data['pack_volume']}, price={data['pack_price']}"
    await msg.answer(text, reply_markup=kb.as_markup())
    await state.set_state(ShowcaseStates.pack_confirm_create)

@router.callback_query(ShowcaseStates.pack_confirm_create, lambda c: c.data=="sc_pack_confirm_create")
async def pack_confirm_create(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    data=await state.get_data(); token=data['token']
    payload={'product_id':data['pack_prod_id'],'volume':data['pack_volume'],'price':data['pack_price']}
    resp=await httpx.AsyncClient(headers={'Authorization':f'Bearer {token}'}).post(f"{API_V1}/packagings",json=payload)
    if resp.status_code in (200,201): pack=resp.json().get('data',{}); await cq.message.answer(f"‚úÖ –§–∞—Å–æ–≤–∫–∞ #{pack.get('id')} —Å–æ–∑–¥–∞–Ω–∞.")
    else: await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞—Å–æ–≤–∫–∏.")
    await state.set_state(ShowcaseStates.choose_action); await show_showcase_menu(cq.message,state)

# -------- Packaging Edit --------
@router.callback_query(ShowcaseStates.choose_action, lambda c: c.data == "sc_pack_edit")
async def sc_pack_edit(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    token=(await state.get_data())['token']
    resp=await httpx.AsyncClient(headers={'Authorization':f'Bearer {token}'}).get(f"{API_V1}/packagings")
    packs=resp.json().get('data',[])
    kb=InlineKeyboardBuilder()
    for p in packs:
        kb.button(text=f"{p['id']} ‚Äî vol:{p['volume']}", callback_data=f"pack_edit_{p['id']}")
    kb.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_cancel_to_showcase")
    kb.adjust(1)
    await state.set_state(ShowcaseStates.pack_edit_select)
    await cq.message.edit_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb.as_markup())

@router.callback_query(ShowcaseStates.pack_edit_select, lambda c: c.data.startswith("pack_edit_"))
async def pack_edit_select(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer(); pid=int(cq.data.split("_")[-1]); await state.update_data(edit_pack_id=pid)
    kb=InlineKeyboardBuilder()
    for fld in ['product_id','volume','price']:
        kb.button(text=fld, callback_data=f"pack_field_{fld}")
    kb.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="sc_cancel_to_showcase")
    kb.adjust(2)
    await state.set_state(ShowcaseStates.pack_edit_field)
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ:",reply_markup=kb.as_markup())

@router.callback_query(ShowcaseStates.pack_edit_field, lambda c: c.data.startswith("pack_field_"))
async def pack_edit_field(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer(); fld=cq.data.split("_")[-1]; await state.update_data(edit_pack_field=fld)
    await state.set_state(ShowcaseStates.pack_edit_value)
    await cq.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {fld}:")

@router.message(ShowcaseStates.pack_edit_value)
async def pack_edit_value(msg: types.Message, state: FSMContext):
    await state.update_data(edit_pack_val=msg.text)
    kb=InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="sc_pack_confirm_edit")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="sc_cancel_to_showcase")
    kb.adjust(2)
    await msg.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {msg.text}?",reply_markup=kb.as_markup())
    await state.set_state(ShowcaseStates.pack_confirm_edit)

@router.callback_query(ShowcaseStates.pack_confirm_edit, lambda c: c.data=="sc_pack_confirm_edit")
async def pack_confirm_edit(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer(); data=await state.get_data(); token=data['token']
    payload={data['edit_pack_field']: data['edit_pack_val']}
    resp=await httpx.AsyncClient(headers={'Authorization':f'Bearer {token}'}).put(
        f"{API_V1}/packagings/{data['edit_pack_id']}", json=payload)
    if resp.status_code==200: await cq.message.answer(f"‚úÖ –§–∞—Å–æ–≤–∫–∞ #{data['edit_pack_id']} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else: await cq.message.answer("‚ùå –û—à–∏–±–∫–∞.")
    await state.set_state(ShowcaseStates.choose_action); await show_showcase_menu(cq.message,state)

@router.callback_query(lambda c: c.data == "sc_cancel_to_showcase", StateFilter(*ShowcaseStates))
async def sc_cancel_to_showcase(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", show_alert=True)
    await state.set_state(ShowcaseStates.choose_action)
    await show_showcase_menu(cq.message, state)
