import html
import os
import httpx
from datetime import datetime, timedelta

from aiogram import Router, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

from admin.handlers.auth import AuthStates
from admin.handlers.common_states import MainStates

API_V1 = os.getenv("API_BASE_URL").rstrip("/") + "/v1"

router = Router()


class RolesStates(StatesGroup):
    # –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É
    add_admin = State()
    confirm_add_admin = State()
    # –æ—Ç–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∫—É
    remove_admin = State()
    confirm_remove_admin = State()

    set_user = State()
    set_role_choose = State()
    confirm_set_role = State()


# ‚Äî‚Äî‚Äî —Å—Ç–∞—Ä—Ç –≤—ã–¥–∞—á–∏ –∞–¥–º–∏–Ω–∫–∏ ‚Äî‚Äî‚Äî
@router.callback_query(
    AuthStates.authenticated,
    StateFilter(MainStates.choosing_scenario),
    lambda c: c.data == "add_admin"
)
async def enter_add_admin(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(RolesStates.add_admin)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="roles_cancel")
    kb.adjust(1)
    await cq.message.edit_text(
        "üëë –í–≤–µ–¥–∏—Ç–µ *Telegram-ID* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
        "–∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ admin:",
        parse_mode="Markdown",
        reply_markup=kb.as_markup()
    )


@router.message(RolesStates.add_admin)
async def process_add_admin_id(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    if not text.isdigit():
        return await msg.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
    telegram_id = int(text)

    token = (await state.get_data())["token"]
    async with httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ) as cli:
        resp = await cli.get(f"{API_V1}/users", params={"telegram_id": telegram_id})
    if resp.status_code != 200:
        return await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    users = resp.json().get("data", [])
    user = next((u for u in users if u.get("telegram_id") == telegram_id), None)
    if not user:
        return await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram-ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ state
    await state.update_data(target_user=user)

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å", callback_data="roles_confirm_add")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞",    callback_data="roles_cancel_add")
    builder.adjust(2)
    name = html.escape(user.get('name') or str(telegram_id))
    role = html.escape(user['role']['name'])

    await msg.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{name}</b> "
        f"(telegram_id <code>{telegram_id}</code>)\n"
        f"—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: <code>{role}</code>\n\n"
        "–í—ã–¥–∞—Ç—å –µ–º—É –ø—Ä–∞–≤–∞ admin?",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

    await state.set_state(RolesStates.confirm_add_admin)


@router.callback_query(RolesStates.confirm_add_admin, lambda c: c.data == "roles_confirm_add")
async def sc_confirm_add(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    data = await state.get_data()
    user = data["target_user"]
    user_id = user["id"]
    token = data["token"]

    async with httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ) as cli:
        resp = await cli.post(f"{API_V1}/users/{user_id}/assign-admin")

    if resp.status_code in (200, 201):
        await cq.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    else:
        await cq.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å admin. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(MainStates.choosing_scenario)
    from admin.handlers.menu import cmd_menu
    await cmd_menu(cq.message, state)


@router.callback_query(RolesStates.confirm_add_admin, lambda c: c.data == "roles_cancel_add")
async def sc_cancel_add(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
    # –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(MainStates.choosing_scenario)
    from admin.handlers.menu import cmd_menu
    await cmd_menu(cq.message, state)


# ‚Äî‚Äî‚Äî —Å—Ç–∞—Ä—Ç –æ—Ç–∑—ã–≤–∞ –∞–¥–º–∏–Ω–∫–∏ ‚Äî‚Äî‚Äî
@router.callback_query(
    AuthStates.authenticated,
    StateFilter(MainStates.choosing_scenario),
    lambda c: c.data == "set_role"
)
async def enter_remove_admin(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(RolesStates.remove_admin)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="roles_cancel")
    kb.adjust(1)
    await cq.message.edit_text(
        "üîÑ –í–≤–µ–¥–∏—Ç–µ *Telegram-ID* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
        "—á—å–∏ –ø—Ä–∞–≤–∞ admin –Ω—É–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å:",
        parse_mode="Markdown",
        reply_markup=kb.as_markup()
    )


@router.message(RolesStates.remove_admin)
async def process_remove_admin_id(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    if not text.isdigit():
        return await msg.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
    telegram_id = int(text)

    token = (await state.get_data())["token"]
    async with httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ) as cli:
        resp = await cli.get(f"{API_V1}/users")
    if resp.status_code != 200:
        return await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    users = resp.json().get("data", [])
    user = next((u for u in users if u.get("telegram_id") == telegram_id), None)
    if not user:
        return await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram-ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.update_data(target_user=user)

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Ç–æ–∑–≤–∞—Ç—å admin", callback_data="roles_confirm_remove")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞",         callback_data="roles_cancel_remove")
    builder.adjust(2)

    await msg.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user.get('name') or telegram_id}*\n"
        f"—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: `{user['role']['name']}`\n\n"
        "–û—Ç–æ–∑–≤–∞—Ç—å —É –Ω–µ–≥–æ –ø—Ä–∞–≤–∞ admin?",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RolesStates.confirm_remove_admin)


@router.callback_query(RolesStates.confirm_remove_admin, lambda c: c.data == "roles_confirm_remove")
async def sc_confirm_remove(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    data = await state.get_data()
    user = data["target_user"]
    user_id = user["id"]
    token = data["token"]

    async with httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ) as cli:
        resp = await cli.post(f"{API_V1}/users/{user_id}/revoke-admin")

    if resp.status_code in (200, 204):
        await cq.message.answer("‚úÖ –ü—Ä–∞–≤–∞ admin —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω—ã.")
    else:
        await cq.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å admin. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.set_state(MainStates.choosing_scenario)
    from admin.handlers.menu import cmd_menu
    await cmd_menu(cq.message, state)


@router.callback_query(RolesStates.confirm_remove_admin, lambda c: c.data == "roles_cancel_remove")
async def sc_cancel_remove(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
    await state.set_state(MainStates.choosing_scenario)
    from admin.handlers.menu import cmd_menu
    await cmd_menu(cq.message, state)

# 1) –í—Ö–æ–¥–∏–º –≤ ¬´–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å¬ª –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(
    AuthStates.authenticated,
    StateFilter(MainStates.choosing_scenario),
    lambda c: c.data == "set_role"
)
async def enter_set_role(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(RolesStates.set_user)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="roles_cancel")
    kb.adjust(1)
    await cq.message.edit_text(
        "üîÑ –í–≤–µ–¥–∏—Ç–µ *Telegram-ID* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
        "—á—å—é —Ä–æ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode="Markdown",
        reply_markup=kb.as_markup()
    )


# 2) –ß–∏—Ç–∞–µ–º ID –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤
@router.message(RolesStates.set_user)
async def process_set_user(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    if not text.isdigit():
        return await msg.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
    tg_id = int(text)

    token = (await state.get_data())["token"]
    async with httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ) as cli:
        resp = await cli.get(f"{API_V1}/users")
    if resp.status_code != 200:
        return await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    users = resp.json().get("data", [])
    user = next((u for u in users if u.get("telegram_id") == tg_id), None)
    if not user:
        return await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram-ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.update_data(target_user=user)

    # 3) –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
    ROLES = [
        ("client",   5),
        ("courier",  4),
        ("manager",  3),
        ("admin",    2),
    ]
    builder = InlineKeyboardBuilder()
    for name, rid in ROLES:
        builder.button(text=name, callback_data=f"sr_{rid}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sr_cancel")
    builder.adjust(2)

    await msg.answer(
        f"üë§ –í—ã –∏–∑–º–µ–Ω—è–µ—Ç–µ *{user.get('name') or user['telegram_id']}*\n"
        f"—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: `{user['role']['name']}`\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RolesStates.set_role_choose)


# 4) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å
@router.callback_query(RolesStates.set_role_choose, lambda c: c.data.startswith("sr_"))
async def choose_new_role(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    rid = int(cq.data.split("_", 1)[1])
    await state.update_data(new_role_id=rid)
    data = await state.get_data()
    user = data["target_user"]

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="sr_confirm")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞",     callback_data="sr_cancel")
    builder.adjust(2)

    await cq.message.answer(
        f"üë§ *{user.get('name') or user['telegram_id']}*\n"
        f"—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å `{user['role']['name']}` –Ω–∞ `{rid}`?",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RolesStates.confirm_set_role)


# 5a) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–º–µ–Ω—É
@router.callback_query(RolesStates.confirm_set_role, lambda c: c.data == "sr_confirm")
async def sc_confirm_set(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    data = await state.get_data()
    user = data["target_user"]
    rid  = data["new_role_id"]
    token = data["token"]

    # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoint‚Äô—ã
    async with httpx.AsyncClient(
        headers={"Authorization": f"Bearer {token}"}
    ) as cli:
        if rid == 4:
            # admin
            resp = await cli.post(f"{API_V1}/users/{user['id']}/assign-admin")
        elif rid == 1:
            # –æ–±—Ä–∞—Ç–Ω–æ –≤ client
            resp = await cli.post(f"{API_V1}/users/{user['id']}/revoke-admin")
        else:
            # –¥–ª—è courier/manager ‚Äî generic update
            resp = await cli.put(
                f"{API_V1}/users/{user['id']}",
                json={"role_id": rid}
            )

    if resp.status_code in (200, 201, 204):
        await cq.message.answer("‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.")
    else:
        await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏.")

    # –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(MainStates.choosing_scenario)
    from admin.handlers.menu import cmd_menu
    await cmd_menu(cq.message, state)

# 5b) –û—Ç–º–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
@router.callback_query(
    RolesStates.set_role_choose, lambda c: c.data == "sr_cancel"
)
@router.callback_query(
    RolesStates.confirm_set_role, lambda c: c.data == "sr_cancel"
)
async def sc_cancel_set(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(MainStates.choosing_scenario)
    from admin.handlers.menu import cmd_menu
    await cmd_menu(cq.message, state)

@router.callback_query(lambda c: c.data=="roles_cancel", StateFilter(*RolesStates))
async def roles_cancel(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    await state.set_state(MainStates.choosing_scenario)
    from admin.handlers.menu import cmd_menu
    await cmd_menu(cq.message, state)
