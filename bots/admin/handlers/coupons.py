# admin/handlers/coupons.py

import os
import httpx
from aiogram import Router, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from admin.handlers.auth import AuthStates
from admin.handlers.common_states import MainStates

API_V1 = os.getenv("API_BASE_URL").rstrip("/") + "/v1"

router = Router()


class CouponStates(StatesGroup):
    choose_action   = State()
    create_code     = State()
    create_discount = State()
    create_expires  = State()


async def show_coupons_menu(msg: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="üé´ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ø–æ–Ω—ã", callback_data="cp_active")
    builder.button(text="‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ",  callback_data="cp_used")
    builder.button(text="‚ûï –ù–æ–≤—ã–π –∫—É–ø–æ–Ω",       callback_data="cp_create")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",             callback_data="back_to_main")
    builder.adjust(2)
    await msg.edit_text(
        "üéü *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞–º–∏* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )


# ‚Äî –≤—Ö–æ–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(
    AuthStates.authenticated,
    StateFilter(MainStates.choosing_scenario),
    lambda c: c.data == "sc_coupons"
)
async def enter_coupons(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(CouponStates.choose_action)
    await show_coupons_menu(cq.message, state)


# ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ
@router.callback_query(CouponStates.choose_action, lambda c: c.data=="cp_active")
async def list_active(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    token = (await state.get_data())["token"]
    async with httpx.AsyncClient(headers={"Authorization":f"Bearer {token}"}) as cli:
        resp = await cli.get(f"{API_V1}/coupons")
    if resp.status_code==200:
        active = [c for c in resp.json().get("data",[]) if not c.get("used")]
        if not active:
            text = "‚Äî –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤ ‚Äî"
        else:
            text = "\n".join(
                f"#{c['id']}: `{c['code']}` ‚Äî —Å–∫–∏–¥–∫–∞ {c['discount_amount']}%"
                + (f", –∏—Å—Ç–µ–∫–∞–µ—Ç {c['expires_at']}" if c.get("expires_at") else "")
                for c in active
            )
        await cq.message.answer(f"üé´ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ø–æ–Ω—ã:*\n{text}", parse_mode="Markdown")
    else:
        await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–æ–≤.")
    await show_coupons_menu(cq.message, state)


# ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
@router.callback_query(CouponStates.choose_action, lambda c: c.data=="cp_used")
async def list_used(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    token = (await state.get_data())["token"]
    async with httpx.AsyncClient(headers={"Authorization":f"Bearer {token}"}) as cli:
        resp = await cli.get(f"{API_V1}/coupons")
    if resp.status_code==200:
        used = [c for c in resp.json().get("data",[]) if c.get("used")]
        if not used:
            text = "‚Äî –Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤ ‚Äî"
        else:
            text = "\n".join(
                f"#{c['id']}: `{c['code']}` ‚Äî —Å–∫–∏–¥–∫–∞ {c['discount_amount']}%"
                for c in used
            )
        await cq.message.answer(f"‚ùå *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω—ã:*\n{text}", parse_mode="Markdown")
    else:
        await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–æ–≤.")
    await show_coupons_menu(cq.message, state)


# ‚Äî –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
@router.callback_query(CouponStates.choose_action, lambda c: c.data=="cp_create")
async def start_create(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(CouponStates.create_code)

    kb = InlineKeyboardBuilder()
    kb.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cp_cancel")
    kb.adjust(1)

    await cq.message.edit_text(
        "‚ûï –í–≤–µ–¥–∏—Ç–µ *–∫–æ–¥* –Ω–æ–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞):",
        parse_mode="Markdown",
        reply_markup=kb.as_markup()
    )


# ‚Äî –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥
@router.message(CouponStates.create_code)
async def process_code(msg: types.Message, state: FSMContext):
    code = msg.text.strip()
    if not code:
        return await msg.answer("‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    await state.update_data(code=code)
    await state.set_state(CouponStates.create_discount)
    await msg.answer("üíµ –í–≤–µ–¥–∏—Ç–µ *—Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏* –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100):", parse_mode="Markdown")

@router.callback_query(CouponStates.create_code, lambda c: c.data=="cp_cancel")
@router.callback_query(CouponStates.create_discount, lambda c: c.data=="cp_cancel")
@router.callback_query(CouponStates.create_expires, lambda c: c.data=="cp_cancel")
async def cancel_create(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(CouponStates.choose_action)
    await show_coupons_menu(cq.message, state)

# ‚Äî –ø–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É
@router.message(CouponStates.create_discount)
async def process_discount(msg: types.Message, state: FSMContext):
    disc = msg.text.strip()
    if not disc.isdigit() or not (0 <= int(disc) <= 100):
        return await msg.answer("‚ùå –°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100.\nüíµ –í–≤–µ–¥–∏—Ç–µ **—Ü–µ–ª–æ–µ** —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")
    await state.update_data(discount_amount=int(disc))
    await state.set_state(CouponStates.create_expires)
    await msg.answer("‚è≥ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ *–¥–Ω–µ–π* –∏—Å—Ç–µ–∫–∞–µ—Ç –∫—É–ø–æ–Ω? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ `0` –¥–ª—è –±–µ–∑ —Å—Ä–æ–∫–∞:", parse_mode="Markdown")


# ‚Äî –ø–æ–ª—É—á–∞–µ–º expires_at
@router.message(CouponStates.create_expires)
async def process_expires(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    if not text.isdigit():
        return await msg.answer("‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: `7`).")
    days = int(text)
    data = await state.get_data()
    payload = {
        "code":            data["code"],
        "discount_amount": data["discount_amount"],
        "used":            False
    }
    if days > 0:
        # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º expires_at –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        from datetime import datetime, timedelta
        expires = (datetime.utcnow() + timedelta(days=days)).date().isoformat()
        payload["expires_at"] = expires

    token = data["token"]
    async with httpx.AsyncClient(headers={"Authorization":f"Bearer {token}"}) as cli:
        resp = await cli.post(f"{API_V1}/coupons", json=payload)

    if resp.status_code in (200, 201):
        c = resp.json().get("data")
        await msg.answer(
            f"‚úÖ –ö—É–ø–æ–Ω —Å–æ–∑–¥–∞–Ω:\n"
            f"#{c['id']}: `{c['code']}` ‚Äî —Å–∫–∏–¥–∫–∞ {c['discount_amount']}%\n"
            + (f"üìÖ –∏—Å—Ç–µ–∫–∞–µ—Ç {c['expires_at']}" if c.get("expires_at") else "")
        , parse_mode="Markdown")
    else:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞.")

    # –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é
    await state.set_state(CouponStates.choose_action)
    await show_coupons_menu(msg, state)


# ‚Äî ¬´‚Ü©Ô∏è –ù–∞–∑–∞–¥¬ª –∏–∑ –º–µ–Ω—é –∫—É–ø–æ–Ω–æ–≤
@router.callback_query(CouponStates.choose_action, lambda c: c.data=="back_to_main")
async def back_to_main(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    from admin.handlers.menu import cmd_menu
    await state.set_state(MainStates.choosing_scenario)
    await cmd_menu(cq.message, state)
