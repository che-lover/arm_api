import os
import httpx

from aiogram import Router, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

from admin.handlers.auth import AuthStates
from admin.handlers.common_states import MainStates

API_V1 = os.getenv("API_BASE_URL").rstrip("/") + "/v1"

router = Router()


class SettingsStates(StatesGroup):
    choose_action         = State()
    change_exchange_url   = State()
    change_channel_link   = State()
    change_operator       = State()


async def show_settings_menu(msg: types.Message, state: FSMContext):
    token = (await state.get_data())["token"]
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    async with httpx.AsyncClient(headers={"Authorization": f"Bearer {token}"}) as cli:
        resp = await cli.get(f"{API_V1}/settings/bot")
    cfg = resp.json().get("data", {}) if resp.status_code == 200 else {}

    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"üîó –û–±–º–µ–Ω–Ω–∏–∫: {cfg.get('exchange_url') or '‚Äî'}",
        callback_data="st_exchange_url",
    )
    builder.button(
        text=f"üõ°Ô∏è –ö–∞–ø—á–∞: {'ON' if cfg.get('captcha_enabled') else 'OFF'}",
        callback_data="st_captcha",
    )
    builder.button(
        text=f"üì£ –ö–∞–Ω–∞–ª: {cfg.get('channel_link') or '‚Äî'}",
        callback_data="st_channel",
    )
    builder.button(
        text=f"üìû –û–ø–µ—Ä–∞—Ç–æ—Ä: {cfg.get('operator_contact') or '‚Äî'}",
        callback_data="st_operator",
    )
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(2)

    await msg.edit_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=builder.as_markup(),
    )


# 1) –í—Ö–æ–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(
    AuthStates.authenticated,
    StateFilter(MainStates.choosing_scenario),
    lambda c: c.data == "sc_settings"
)
async def enter_settings(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(SettingsStates.choose_action)
    await show_settings_menu(cq.message, state)


# 2) ¬´‚Ü©Ô∏è –ù–∞–∑–∞–¥¬ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(SettingsStates.choose_action, lambda c: c.data == "back_to_main")
async def settings_back_to_main(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(MainStates.choosing_scenario)
    from admin.handlers.menu import cmd_menu
    await cmd_menu(cq.message, state)


# 3) ¬´‚Ü©Ô∏è –ù–∞–∑–∞–¥¬ª –∏–∑ –ª—é–±–æ–≥–æ –ø–æ–¥-—Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
_SUBSTATES = [
    SettingsStates.change_exchange_url,
    SettingsStates.change_channel_link,
    SettingsStates.change_operator,
]
@router.callback_query(StateFilter(*_SUBSTATES), lambda c: c.data == "st_back")
async def settings_back_to_menu(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(SettingsStates.choose_action)
    await show_settings_menu(cq.message, state)


# 4) –ò–∑–º–µ–Ω–∏—Ç—å URL –æ–±–º–µ–Ω–Ω–∏–∫–∞
@router.callback_query(SettingsStates.choose_action, lambda c: c.data == "st_exchange_url")
async def settings_start_exchange(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(SettingsStates.change_exchange_url)
    kb = InlineKeyboardBuilder().button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="st_back").as_markup()
    await cq.message.edit_text("üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –æ–±–º–µ–Ω–Ω–∏–∫–∞:", reply_markup=kb)

@router.message(SettingsStates.change_exchange_url)
async def settings_change_exchange(msg: types.Message, state: FSMContext):
    url = msg.text.strip()
    token = (await state.get_data())["token"]
    async with httpx.AsyncClient(headers={"Authorization": f"Bearer {token}"}) as cli:
        resp = await cli.put(f"{API_V1}/settings/bot", json={"exchange_url": url})
    if resp.status_code == 200:
        await msg.answer("‚úÖ URL –æ–±–º–µ–Ω–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å URL.")
    await state.set_state(SettingsStates.choose_action)
    await show_settings_menu(msg, state)


# 5) –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É
@router.callback_query(SettingsStates.choose_action, lambda c: c.data == "st_captcha")
async def settings_toggle_captcha(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    token = (await state.get_data())["token"]
    async with httpx.AsyncClient(headers={"Authorization": f"Bearer {token}"}) as cli:
        cur = (await cli.get(f"{API_V1}/settings/bot")).json().get("data", {})
        new = not cur.get("captcha_enabled", True)
        resp = await cli.put(f"{API_V1}/settings/bot", json={"captcha_enabled": new})
    if resp.status_code == 200:
        await cq.message.answer(f"üõ°Ô∏è –ö–∞–ø—á–∞ —Ç–µ–ø–µ—Ä—å {'–≤–∫–ª—é—á–µ–Ω–∞' if new else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}.")
    else:
        await cq.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É.")
    await state.set_state(SettingsStates.choose_action)
    await show_settings_menu(cq.message, state)


# 6) –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
@router.callback_query(SettingsStates.choose_action, lambda c: c.data == "st_channel")
async def settings_start_channel(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(SettingsStates.change_channel_link)
    kb = InlineKeyboardBuilder().button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="st_back").as_markup()
    await cq.message.edit_text("üì£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞:", reply_markup=kb)

@router.message(SettingsStates.change_channel_link)
async def settings_change_channel(msg: types.Message, state: FSMContext):
    link = msg.text.strip()
    token = (await state.get_data())["token"]
    async with httpx.AsyncClient(headers={"Authorization": f"Bearer {token}"}) as cli:
        resp = await cli.put(f"{API_V1}/settings/bot", json={"channel_link": link})
    if resp.status_code == 200:
        await msg.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É.")
    await state.set_state(SettingsStates.choose_action)
    await show_settings_menu(msg, state)


# 7) –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(SettingsStates.choose_action, lambda c: c.data == "st_operator")
async def settings_start_operator(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(SettingsStates.change_operator)
    kb = InlineKeyboardBuilder().button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="st_back").as_markup()
    await cq.message.edit_text("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@router.message(SettingsStates.change_operator)
async def settings_change_operator(msg: types.Message, state: FSMContext):
    contact = msg.text.strip()
    token = (await state.get_data())["token"]
    async with httpx.AsyncClient(headers={"Authorization": f"Bearer {token}"}) as cli:
        resp = await cli.put(f"{API_V1}/settings/bot", json={"operator_contact": contact})
    if resp.status_code == 200:
        await msg.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.")
    await state.set_state(SettingsStates.choose_action)
    await show_settings_menu(msg, state)


# 8) –§–æ–ª–ª–±—ç–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.message(SettingsStates.choose_action)
async def settings_fallback_text(msg: types.Message, state: FSMContext):
    await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚Ü©Ô∏è –ù–∞–∑–∞–¥.")


# 9) –§–æ–ª–ª–±—ç–∫ –¥–ª—è –ª—é–±—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö callback –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(SettingsStates.choose_action)
async def settings_fallback_callback(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await show_settings_menu(cq.message, state)
